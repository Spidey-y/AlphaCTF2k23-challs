import math, base64, zlib

_0x3A1 = "AlphaCTF{fake_flag_for_testing}"
_0x27B = 0   
_0x8D6 = [2]
_0x6F9 = 7
_0x542 = 3
_0x59C = _0x6F9 * _0x542
_0x82C = lambda _0x1B9: bin(ord(_0x1B9))[2:].zfill(8)
_0x3A2 = ""
for _0x285 in range(len(_0x3A1)):
    _0x3A2 += _0x82C(_0x3A1[_0x285])
_0x3A1 = _0x3A2

_0x82C = 2
for _0x285 in range(len(_0x3A1)*8):
    _0x82C = 2 * _0x82C + 1
    _0x2B0 = math.sqrt(_0x6F9)
    _0x8D6.append(_0x82C)

_0x1C7 = [1, 2, 3, 4, 5]
_0x1E3 = [x**2 for x in _0x1C7]

for _0x82C, _0x1B5 in zip(_0x3A1, _0x8D6):
    _0x27B += int(_0x82C) * _0x1B5

_0x27B = str(_0x27B).encode('utf-8')
_0x27B = base64.b64encode(_0x27B)
_0x27B = zlib.compress(_0x27B)
f = open("enc", "w")
f.write(f"\x72\x65\x73\x75\x6C\x74\x20{_0x27B}\x20\x21")
f.close()
